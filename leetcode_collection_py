# 1545. Find Kth Bit in Nth Binary String
class Solution:
    def findKthBit(self, n: int, k: int) -> str:
        # invert string
        def invert_s(t):
            for j in range(len(t)):
                if t[j] == "1":
                    t = t[:j] + "0" + t[j+1:]
                elif t[j] == "0":
                    t = t[:j] + "1" + t[j+1:]
            return t
        s = "0"
        for i in range(n):
            
            s = s + "1" + invert_s(s)[::-1]
        return s[k-1]
        
# I followed the description of problem step by step, but the result was Time Limit Exceeded.
# On the below is other solution.
# Because the squence generate from the sequence of last step, the half of sequence is the same as last sequence.
# This method is faster than mine, but need to understand this problem very well.
class Solution:
    def findKthBit(self, n: int, k: int) -> str:
        # base case
        if n == 1:
            return "0"
        
        # calculate length of S_n
        l = 2 ** n - 1
        
        # recursion
        mid = l // 2 + 1
        if k == mid:
            return "1"
        elif k < mid:
            return self.findKthBit(n - 1, k)
        else:
            return str(1 - int(self.findKthBit(n - 1, l - k + 1)))
